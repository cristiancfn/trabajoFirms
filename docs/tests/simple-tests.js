/**
 * PRUEBAS UNITARIAS SIMPLIFICADAS - PROYECTO GEOFIRES
 * ===================================================
 * 
 * Versi√≥n corregida del sistema de pruebas sin colorByConfidence y tileLayerConfig
 */

// ============================================================================
// FUNCIONES DE PRUEBA SIMPLIFICADAS
// ============================================================================

/**
 * Ejecutar todas las pruebas
 */
function runAllTests() {
    console.clear();
    console.log('üß™ INICIANDO TODAS LAS PRUEBAS...');
    console.log('=====================================');
    
    let total = 0;
    let passed = 0;
    let failed = 0;
    
    // Pruebas de utilidades
    console.group('üìä Pruebas de Utilidades (helpers.js)');
    
    try {
        // Prueba 1: isInColombia con coordenadas v√°lidas
        total++;
        if (isInColombia(4.7110, -74.0721) === true) {
            console.log('‚úÖ isInColombia(4.7110, -74.0721) retorna true');
            passed++;
        } else {
            console.error('‚ùå isInColombia(4.7110, -74.0721) deber√≠a retornar true');
            failed++;
        }
    } catch (error) {
        console.error('‚ùå Error en prueba de isInColombia:', error);
        failed++;
    }
    
    try {
        // Prueba 2: isInColombia con coordenadas fuera de Colombia
        total++;
        if (isInColombia(40.7128, -74.0060) === false) {
            console.log('‚úÖ isInColombia(40.7128, -74.0060) retorna false');
            passed++;
        } else {
            console.error('‚ùå isInColombia(40.7128, -74.0060) deber√≠a retornar false');
            failed++;
        }
    } catch (error) {
        console.error('‚ùå Error en prueba de isInColombia:', error);
        failed++;
    }
    
    try {
        // Prueba 3: formatAcqTime
        total++;
        if (formatAcqTime(1430) === '14:30') {
            console.log('‚úÖ formatAcqTime(1430) retorna 14:30');
            passed++;
        } else {
            console.error('‚ùå formatAcqTime(1430) deber√≠a retornar 14:30');
            failed++;
        }
    } catch (error) {
        console.error('‚ùå Error en prueba de formatAcqTime:', error);
        failed++;
    }
    
    console.groupEnd();
    
    // Pruebas de constantes
    console.group('‚öôÔ∏è Pruebas de Constantes (constants.js)');
    
    try {
        // Prueba 4: colombiaBounds
        total++;
        if (colombiaBounds && colombiaBounds.length === 2) {
            console.log('‚úÖ colombiaBounds est√° definido y tiene 2 elementos');
            passed++;
        } else {
            console.error('‚ùå colombiaBounds deber√≠a estar definido y tener 2 elementos');
            failed++;
        }
    } catch (error) {
        console.error('‚ùå Error en prueba de colombiaBounds:', error);
        failed++;
    }
    
    try {
        // Prueba 5: mapConfig
        total++;
        if (mapConfig && mapConfig.center && mapConfig.zoom) {
            console.log('‚úÖ mapConfig est√° definido con center y zoom');
            passed++;
        } else {
            console.error('‚ùå mapConfig deber√≠a estar definido con center y zoom');
            failed++;
        }
    } catch (error) {
        console.error('‚ùå Error en prueba de mapConfig:', error);
        failed++;
    }
    
    console.groupEnd();
    
    // Pruebas de configuraci√≥n
    console.group('üîß Pruebas de Configuraci√≥n (config.js)');
    
    try {
        // Prueba 6: config.API_URL
        total++;
        if (config && config.API_URL && typeof config.API_URL === 'string') {
            console.log('‚úÖ config.API_URL est√° definido y es string');
            passed++;
        } else {
            console.error('‚ùå config.API_URL deber√≠a estar definido y ser string');
            failed++;
        }
    } catch (error) {
        console.error('‚ùå Error en prueba de config.API_URL:', error);
        failed++;
    }
    
    console.groupEnd();
    
    // Pruebas de mapa
    console.group('üó∫Ô∏è Pruebas de Mapa');
    
    try {
        // Prueba 7: Configuraci√≥n del mapa
        total++;
        if (mapConfig.center[0] === 4.6 && mapConfig.center[1] === -74.1) {
            console.log('‚úÖ Centro del mapa configurado correctamente');
            passed++;
        } else {
            console.error('‚ùå Centro del mapa deber√≠a ser [4.6, -74.1]');
            failed++;
        }
    } catch (error) {
        console.error('‚ùå Error en prueba de configuraci√≥n del mapa:', error);
        failed++;
    }
    
    try {
        // Prueba 8: Zoom del mapa
        total++;
        if (mapConfig.zoom === 6) {
            console.log('‚úÖ Zoom del mapa configurado correctamente');
            passed++;
        } else {
            console.error('‚ùå Zoom del mapa deber√≠a ser 6');
            failed++;
        }
    } catch (error) {
        console.error('‚ùå Error en prueba de zoom del mapa:', error);
        failed++;
    }
    
    console.groupEnd();
    
    // Pruebas de servicios
    console.group('üîå Pruebas de Servicios');
    
    try {
        // Prueba 9: URL de API
        total++;
        if (config.API_URL && config.API_URL.includes('firms')) {
            console.log('‚úÖ URL de API contiene "firms"');
            passed++;
        } else {
            console.error('‚ùå URL de API deber√≠a contener "firms"');
            failed++;
        }
    } catch (error) {
        console.error('‚ùå Error en prueba de URL de API:', error);
        failed++;
    }
    
    try {
        // Prueba 10: Funci√≥n isInColombia disponible
        total++;
        if (typeof isInColombia === 'function') {
            console.log('‚úÖ Funci√≥n isInColombia est√° disponible');
            passed++;
        } else {
            console.error('‚ùå Funci√≥n isInColombia deber√≠a estar disponible');
            failed++;
        }
    } catch (error) {
        console.error('‚ùå Error en prueba de funci√≥n isInColombia:', error);
        failed++;
    }
    
    console.groupEnd();
    
    // Pruebas de marcadores
    console.group('üìç Pruebas de Marcadores');
    
    try {
        // Prueba 11: Funci√≥n createPopupContent
        total++;
        if (typeof createPopupContent === 'function') {
            console.log('‚úÖ Funci√≥n createPopupContent est√° disponible');
            passed++;
        } else {
            console.error('‚ùå Funci√≥n createPopupContent deber√≠a estar disponible');
            failed++;
        }
    } catch (error) {
        console.error('‚ùå Error en prueba de funci√≥n createPopupContent:', error);
        failed++;
    }
    
    try {
        // Prueba 12: Generaci√≥n de contenido HTML
        total++;
        const mockProperties = {
            acq_date: '2024-01-15',
            acq_time: '1430',
            brightness: '320.5',
            confidence: '85',
            frp: '12.3',
            latitude: 4.7110,
            longitude: -74.0721
        };
        
        const popupContent = createPopupContent(mockProperties);
        if (typeof popupContent === 'string' && popupContent.includes('FIRMS MODIS (24h)')) {
            console.log('‚úÖ createPopupContent genera contenido HTML v√°lido');
            passed++;
        } else {
            console.error('‚ùå createPopupContent deber√≠a generar contenido HTML v√°lido');
            failed++;
        }
    } catch (error) {
        console.error('‚ùå Error en prueba de generaci√≥n de contenido HTML:', error);
        failed++;
    }
    
    console.groupEnd();
    
    // Pruebas de integraci√≥n
    console.group('üîó Pruebas de Integraci√≥n');
    
    try {
        // Prueba 13: Funciones disponibles
        total++;
        if (typeof isInColombia === 'function' && 
            typeof formatAcqTime === 'function') {
            console.log('‚úÖ Todas las funciones principales est√°n disponibles');
            passed++;
        } else {
            console.error('‚ùå Todas las funciones principales deber√≠an estar disponibles');
            failed++;
        }
    } catch (error) {
        console.error('‚ùå Error en prueba de funciones disponibles:', error);
        failed++;
    }
    
    try {
        // Prueba 14: Configuraci√≥n disponible
        total++;
        if (config.API_URL && colombiaBounds && mapConfig) {
            console.log('‚úÖ Toda la configuraci√≥n est√° disponible');
            passed++;
        } else {
            console.error('‚ùå Toda la configuraci√≥n deber√≠a estar disponible');
            failed++;
        }
    } catch (error) {
        console.error('‚ùå Error en prueba de configuraci√≥n disponible:', error);
        failed++;
    }
    
    try {
        // Prueba 15: Consistencia de coordenadas
        total++;
        if (colombiaBounds && isInColombia(colombiaBounds[0][0], colombiaBounds[0][1])) {
            console.log('‚úÖ Las coordenadas de Colombia son consistentes');
            passed++;
        } else {
            console.error('‚ùå Las coordenadas de Colombia deber√≠an ser consistentes');
            failed++;
        }
    } catch (error) {
        console.error('‚ùå Error en prueba de consistencia de coordenadas:', error);
        failed++;
    }
    
    console.groupEnd();
    
    // Resumen
    console.log('=====================================');
    console.log(`üìä RESUMEN DE PRUEBAS:`);
    console.log(`‚úÖ Pasadas: ${passed}`);
    console.log(`‚ùå Fallidas: ${failed}`);
    console.log(`üìà Total: ${total}`);
    console.log(`üìä Porcentaje de √©xito: ${((passed / total) * 100).toFixed(1)}%`);
    
    if (failed === 0) {
        console.log('üéâ ¬°TODAS LAS PRUEBAS PASARON EXITOSAMENTE!');
    } else {
        console.log('‚ö†Ô∏è  Algunas pruebas fallaron. Revisa los errores arriba.');
    }
    
    return {
        total,
        passed,
        failed,
        successRate: ((passed / total) * 100).toFixed(1)
    };
}

/**
 * Ejecutar pruebas de utilidades
 */
function runUtilsTests() {
    console.clear();
    console.log('üß™ EJECUTANDO PRUEBAS DE UTILIDADES...');
    console.log('==========================================');
    
    let total = 0;
    let passed = 0;
    let failed = 0;
    
    console.group('üìä Pruebas de Utilidades (helpers.js)');
    
    try {
        // Prueba 1: isInColombia con coordenadas v√°lidas
        total++;
        if (isInColombia(4.7110, -74.0721) === true) {
            console.log('‚úÖ isInColombia(4.7110, -74.0721) retorna true');
            passed++;
        } else {
            console.error('‚ùå isInColombia(4.7110, -74.0721) deber√≠a retornar true');
            failed++;
        }
    } catch (error) {
        console.error('‚ùå Error en prueba de isInColombia:', error);
        failed++;
    }
    
    try {
        // Prueba 2: isInColombia con coordenadas fuera de Colombia
        total++;
        if (isInColombia(40.7128, -74.0060) === false) {
            console.log('‚úÖ isInColombia(40.7128, -74.0060) retorna false');
            passed++;
        } else {
            console.error('‚ùå isInColombia(40.7128, -74.0060) deber√≠a retornar false');
            failed++;
        }
    } catch (error) {
        console.error('‚ùå Error en prueba de isInColombia:', error);
        failed++;
    }
    
    try {
        // Prueba 3: formatAcqTime
        total++;
        if (formatAcqTime(1430) === '14:30') {
            console.log('‚úÖ formatAcqTime(1430) retorna 14:30');
            passed++;
        } else {
            console.error('‚ùå formatAcqTime(1430) deber√≠a retornar 14:30');
            failed++;
        }
    } catch (error) {
        console.error('‚ùå Error en prueba de formatAcqTime:', error);
        failed++;
    }
    
    console.groupEnd();
    
    // Resumen
    console.log('=====================================');
    console.log(`üìä RESUMEN DE PRUEBAS DE UTILIDADES:`);
    console.log(`‚úÖ Pasadas: ${passed}`);
    console.log(`‚ùå Fallidas: ${failed}`);
    console.log(`üìà Total: ${total}`);
    console.log(`üìä Porcentaje de √©xito: ${((passed / total) * 100).toFixed(1)}%`);
    
    return {
        total,
        passed,
        failed,
        successRate: ((passed / total) * 100).toFixed(1)
    };
}

/**
 * Ejecutar pruebas de constantes
 */
function runConstantsTests() {
    console.clear();
    console.log('üß™ EJECUTANDO PRUEBAS DE CONSTANTES...');
    console.log('==========================================');
    
    let total = 0;
    let passed = 0;
    let failed = 0;
    
    console.group('‚öôÔ∏è Pruebas de Constantes (constants.js)');
    
    try {
        // Prueba 1: colombiaBounds
        total++;
        if (colombiaBounds && colombiaBounds.length === 2) {
            console.log('‚úÖ colombiaBounds est√° definido y tiene 2 elementos');
            passed++;
        } else {
            console.error('‚ùå colombiaBounds deber√≠a estar definido y tener 2 elementos');
            failed++;
        }
    } catch (error) {
        console.error('‚ùå Error en prueba de colombiaBounds:', error);
        failed++;
    }
    
    try {
        // Prueba 2: mapConfig
        total++;
        if (mapConfig && mapConfig.center && mapConfig.zoom) {
            console.log('‚úÖ mapConfig est√° definido con center y zoom');
            passed++;
        } else {
            console.error('‚ùå mapConfig deber√≠a estar definido con center y zoom');
            failed++;
        }
    } catch (error) {
        console.error('‚ùå Error en prueba de mapConfig:', error);
        failed++;
    }
    
    console.groupEnd();
    
    // Resumen
    console.log('=====================================');
    console.log(`üìä RESUMEN DE PRUEBAS DE CONSTANTES:`);
    console.log(`‚úÖ Pasadas: ${passed}`);
    console.log(`‚ùå Fallidas: ${failed}`);
    console.log(`üìà Total: ${total}`);
    console.log(`üìä Porcentaje de √©xito: ${((passed / total) * 100).toFixed(1)}%`);
    
    return {
        total,
        passed,
        failed,
        successRate: ((passed / total) * 100).toFixed(1)
    };
}

/**
 * Ejecutar pruebas de mapa
 */
function runMapTests() {
    console.clear();
    console.log('üß™ EJECUTANDO PRUEBAS DE MAPA...');
    console.log('==========================================');
    
    let total = 0;
    let passed = 0;
    let failed = 0;
    
    console.group('üó∫Ô∏è Pruebas de Mapa');
    
    try {
        // Prueba 1: Configuraci√≥n del mapa
        total++;
        if (mapConfig.center[0] === 4.6 && mapConfig.center[1] === -74.1) {
            console.log('‚úÖ Centro del mapa configurado correctamente');
            passed++;
        } else {
            console.error('‚ùå Centro del mapa deber√≠a ser [4.6, -74.1]');
            failed++;
        }
    } catch (error) {
        console.error('‚ùå Error en prueba de configuraci√≥n del mapa:', error);
        failed++;
    }
    
    try {
        // Prueba 2: Zoom del mapa
        total++;
        if (mapConfig.zoom === 6) {
            console.log('‚úÖ Zoom del mapa configurado correctamente');
            passed++;
        } else {
            console.error('‚ùå Zoom del mapa deber√≠a ser 6');
            failed++;
        }
    } catch (error) {
        console.error('‚ùå Error en prueba de zoom del mapa:', error);
        failed++;
    }
    
    console.groupEnd();
    
    // Resumen
    console.log('=====================================');
    console.log(`üìä RESUMEN DE PRUEBAS DE MAPA:`);
    console.log(`‚úÖ Pasadas: ${passed}`);
    console.log(`‚ùå Fallidas: ${failed}`);
    console.log(`üìà Total: ${total}`);
    console.log(`üìä Porcentaje de √©xito: ${((passed / total) * 100).toFixed(1)}%`);
    
    return {
        total,
        passed,
        failed,
        successRate: ((passed / total) * 100).toFixed(1)
    };
}

/**
 * Ejecutar pruebas de servicios
 */
function runServiceTests() {
    console.clear();
    console.log('üß™ EJECUTANDO PRUEBAS DE SERVICIOS...');
    console.log('==========================================');
    
    let total = 0;
    let passed = 0;
    let failed = 0;
    
    console.group('üîå Pruebas de Servicios');
    
    try {
        // Prueba 1: URL de API
        total++;
        if (config.API_URL && config.API_URL.includes('firms')) {
            console.log('‚úÖ URL de API contiene "firms"');
            passed++;
        } else {
            console.error('‚ùå URL de API deber√≠a contener "firms"');
            failed++;
        }
    } catch (error) {
        console.error('‚ùå Error en prueba de URL de API:', error);
        failed++;
    }
    
    try {
        // Prueba 2: Funci√≥n isInColombia disponible
        total++;
        if (typeof isInColombia === 'function') {
            console.log('‚úÖ Funci√≥n isInColombia est√° disponible');
            passed++;
        } else {
            console.error('‚ùå Funci√≥n isInColombia deber√≠a estar disponible');
            failed++;
        }
    } catch (error) {
        console.error('‚ùå Error en prueba de funci√≥n isInColombia:', error);
        failed++;
    }
    
    console.groupEnd();
    
    // Resumen
    console.log('=====================================');
    console.log(`üìä RESUMEN DE PRUEBAS DE SERVICIOS:`);
    console.log(`‚úÖ Pasadas: ${passed}`);
    console.log(`‚ùå Fallidas: ${failed}`);
    console.log(`üìà Total: ${total}`);
    console.log(`üìä Porcentaje de √©xito: ${((passed / total) * 100).toFixed(1)}%`);
    
    return {
        total,
        passed,
        failed,
        successRate: ((passed / total) * 100).toFixed(1)
    };
}

/**
 * Ejecutar pruebas de marcadores
 */
function runMarkerTests() {
    console.clear();
    console.log('üß™ EJECUTANDO PRUEBAS DE MARCADORES...');
    console.log('==========================================');
    
    let total = 0;
    let passed = 0;
    let failed = 0;
    
    console.group('üìç Pruebas de Marcadores');
    
    try {
        // Prueba 1: Funci√≥n createPopupContent
        total++;
        if (typeof createPopupContent === 'function') {
            console.log('‚úÖ Funci√≥n createPopupContent est√° disponible');
            passed++;
        } else {
            console.error('‚ùå Funci√≥n createPopupContent deber√≠a estar disponible');
            failed++;
        }
    } catch (error) {
        console.error('‚ùå Error en prueba de funci√≥n createPopupContent:', error);
        failed++;
    }
    
    try {
        // Prueba 2: Generaci√≥n de contenido HTML
        total++;
        const mockProperties = {
            acq_date: '2024-01-15',
            acq_time: '1430',
            brightness: '320.5',
            confidence: '85',
            frp: '12.3',
            latitude: 4.7110,
            longitude: -74.0721
        };
        
        const popupContent = createPopupContent(mockProperties);
        if (typeof popupContent === 'string' && popupContent.includes('FIRMS MODIS (24h)')) {
            console.log('‚úÖ createPopupContent genera contenido HTML v√°lido');
            passed++;
        } else {
            console.error('‚ùå createPopupContent deber√≠a generar contenido HTML v√°lido');
            failed++;
        }
    } catch (error) {
        console.error('‚ùå Error en prueba de generaci√≥n de contenido HTML:', error);
        failed++;
    }
    
    console.groupEnd();
    
    // Resumen
    console.log('=====================================');
    console.log(`üìä RESUMEN DE PRUEBAS DE MARCADORES:`);
    console.log(`‚úÖ Pasadas: ${passed}`);
    console.log(`‚ùå Fallidas: ${failed}`);
    console.log(`üìà Total: ${total}`);
    console.log(`üìä Porcentaje de √©xito: ${((passed / total) * 100).toFixed(1)}%`);
    
    return {
        total,
        passed,
        failed,
        successRate: ((passed / total) * 100).toFixed(1)
    };
}

/**
 * Ejecutar pruebas de integraci√≥n
 */
function runIntegrationTests() {
    console.clear();
    console.log('üß™ EJECUTANDO PRUEBAS DE INTEGRACI√ìN...');
    console.log('==========================================');
    
    let total = 0;
    let passed = 0;
    let failed = 0;
    
    console.group('üîó Pruebas de Integraci√≥n');
    
    try {
        // Prueba 1: Funciones disponibles
        total++;
        if (typeof isInColombia === 'function' && 
            typeof formatAcqTime === 'function') {
            console.log('‚úÖ Todas las funciones principales est√°n disponibles');
            passed++;
        } else {
            console.error('‚ùå Todas las funciones principales deber√≠an estar disponibles');
            failed++;
        }
    } catch (error) {
        console.error('‚ùå Error en prueba de funciones disponibles:', error);
        failed++;
    }
    
    try {
        // Prueba 2: Configuraci√≥n disponible
        total++;
        if (config.API_URL && colombiaBounds && mapConfig) {
            console.log('‚úÖ Toda la configuraci√≥n est√° disponible');
            passed++;
        } else {
            console.error('‚ùå Toda la configuraci√≥n deber√≠a estar disponible');
            failed++;
        }
    } catch (error) {
        console.error('‚ùå Error en prueba de configuraci√≥n disponible:', error);
        failed++;
    }
    
    try {
        // Prueba 3: Consistencia de coordenadas
        total++;
        if (colombiaBounds && isInColombia(colombiaBounds[0][0], colombiaBounds[0][1])) {
            console.log('‚úÖ Las coordenadas de Colombia son consistentes');
            passed++;
        } else {
            console.error('‚ùå Las coordenadas de Colombia deber√≠an ser consistentes');
            failed++;
        }
    } catch (error) {
        console.error('‚ùå Error en prueba de consistencia de coordenadas:', error);
        failed++;
    }
    
    console.groupEnd();
    
    // Resumen
    console.log('=====================================');
    console.log(`üìä RESUMEN DE PRUEBAS DE INTEGRACI√ìN:`);
    console.log(`‚úÖ Pasadas: ${passed}`);
    console.log(`‚ùå Fallidas: ${failed}`);
    console.log(`üìà Total: ${total}`);
    console.log(`üìä Porcentaje de √©xito: ${((passed / total) * 100).toFixed(1)}%`);
    
    return {
        total,
        passed,
        failed,
        successRate: ((passed / total) * 100).toFixed(1)
    };
}

// ============================================================================
// EXPORTACI√ìN
// ============================================================================

// Hacer las funciones disponibles globalmente
if (typeof window !== 'undefined') {
    window.runAllTests = runAllTests;
    window.runUtilsTests = runUtilsTests;
    window.runConstantsTests = runConstantsTests;
    window.runMapTests = runMapTests;
    window.runServiceTests = runServiceTests;
    window.runMarkerTests = runMarkerTests;
    window.runIntegrationTests = runIntegrationTests;
}

// Exportar para uso en m√≥dulos ES6
export {
    runAllTests,
    runUtilsTests,
    runConstantsTests,
    runMapTests,
    runServiceTests,
    runMarkerTests,
    runIntegrationTests
};
